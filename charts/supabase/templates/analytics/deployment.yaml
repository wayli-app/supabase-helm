{{- if .Values.analytics.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.fullname" . }}-analytics
  namespace: {{ include "supabase.namespace" . }}
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: analytics
    supabaseComponent: {{ include "supabase.fullname" . }}-analytics
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "supabase.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: analytics
      supabaseComponent: {{ include "supabase.fullname" . }}-analytics
  template:
    metadata:
      labels:
        {{- include "supabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: analytics
        supabaseComponent: {{ include "supabase.fullname" . }}-analytics
    spec:
      {{- with (include "supabase.imagePullSecrets" (dict "component" .Values.analytics "global" .Values.global)) }}
      {{ . | nindent 6 }}
      {{- end }}
      {{- if .Values.analytics.serviceAccount.create }}
      serviceAccountName: {{ .Values.analytics.serviceAccount.name | default (printf "%s-analytics" (include "supabase.fullname" .)) }}
      {{- end }}
      {{- with .Values.analytics.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.analytics.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.analytics.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- with .Values.analytics.initContainers }}
          {{- toYaml . | nindent 8 }}
        {{- else }}
        - name: init-db
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_HOST
              {{- if .Values.db.enabled }}
              value: {{ include "supabase.databaseHost" $ }}
              {{- else }}
              value: {{ .Values.analytics.config.dbHost | default "localhost" | quote }}
              {{- end }}
            - name: DB_USER
              value: {{ .Values.analytics.config.dbUser | quote }}
            - name: DB_PORT
              {{- if .Values.db.enabled }}
              value: {{ include "supabase.databasePort" $ | quote }}
              {{- else }}
              value: "5432"
              {{- end }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "supabase.dbSecretName" . }}
                  key: {{ .Values.db.postgres.secretKeys.userPasswordKey }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready -h $(DB_HOST) -p $(DB_PORT) -U $(DB_USER); do
                echo "Waiting for database to start..."
                sleep 2
              done
              echo "Database is ready"
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi
      {{- end }}
      {{- with (include "supabase.podSecurityContext" (dict "component" "analytics" "Values" .Values)) }}
      securityContext:
        {{- . }}
      {{- end }}
      containers:
      - name: analytics
        image: "{{ include "supabase.image" (dict "imageRoot" .Values.analytics.image "global" .Values.global) }}"
        imagePullPolicy: {{ .Values.analytics.image.pullPolicy }}
        {{- with (include "supabase.containerSecurityContext" (dict "component" "analytics" "Values" .Values)) }}
        securityContext:
          {{- . }}
        {{- end }}
        {{- with .Values.analytics.livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.analytics.readinessProbe }}
        readinessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            cpu: {{ .Values.analytics.resources.requests.cpu }}
            memory: {{ .Values.analytics.resources.requests.memory }}
          limits:
            cpu: {{ .Values.analytics.resources.limits.cpu }}
            memory: {{ .Values.analytics.resources.limits.memory }}
        env:
        - name: LOGFLARE_NODE_HOST
          value: "0.0.0.0"
        - name: DB_DRIVER
          value: postgres
        - name: DB_USERNAME
          value: {{ .Values.analytics.config.dbUser | quote }}
        - name: DB_DATABASE
          value: {{ .Values.analytics.config.dbDatabase | quote }}
        - name: DB_HOSTNAME
          {{- if .Values.db.enabled }}
          value: {{ .Values.db.postgres.service.name | default (printf "%s-db" (include "supabase.fullname" .)) }}
          {{- else }}
          value: {{ .Values.analytics.config.dbHost | default "localhost" | quote }}
          {{- end }}
        - name: DB_PORT
          {{- if .Values.db.enabled }}
          value: {{ .Values.db.postgres.service.port | default 5432 | quote }}
          {{- else }}
          value: "5432"
          {{- end }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "supabase.dbSecretName" . }}
              key: {{ .Values.db.postgres.secretKeys.userPasswordKey }}
        - name: DB_SCHEMA
          value: {{ .Values.analytics.config.dbSchema | quote }}
        - name: LOGFLARE_PUBLIC_ACCESS_TOKEN
          {{- if .Values.analytics.existingSecret }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.analytics.existingSecret }}
              key: {{ .Values.analytics.secretKeys.logflarePublicAccessToken }}
          {{- else if .Values.analytics.logflarePublicAccessToken }}
          value: {{ .Values.analytics.logflarePublicAccessToken | quote }}
          {{- else }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.supabase.existingSecret | default (printf "%s-secret" (include "supabase.fullname" .)) }}
              key: {{ .Values.global.supabase.secretKeys.anonKey }}
          {{- end }}
        - name: LOGFLARE_PRIVATE_ACCESS_TOKEN
          {{- if .Values.analytics.existingSecret }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.analytics.existingSecret }}
              key: {{ .Values.analytics.secretKeys.logflarePrivateAccessToken }}
          {{- else if .Values.analytics.logflarePrivateAccessToken }}
          value: {{ .Values.analytics.logflarePrivateAccessToken | quote }}
          {{- else }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.supabase.existingSecret | default (printf "%s-secret" (include "supabase.fullname" .)) }}
              key: {{ .Values.global.supabase.secretKeys.serviceRoleKey }}
          {{- end }}
        - name: LOGFLARE_SINGLE_TENANT
          value: {{ .Values.analytics.config.singleTenant | quote }}
        - name: LOGFLARE_SUPABASE_MODE
          value: {{ .Values.analytics.config.supabaseMode | quote }}
        - name: LOGFLARE_MIN_CLUSTER_SIZE
          value: {{ .Values.analytics.config.minClusterSize | quote }}
        - name: POSTGRES_BACKEND_URL
          {{- if .Values.db.enabled }}
          value: "postgresql://{{ .Values.analytics.config.dbUser }}:$(DB_PASSWORD)@{{ .Values.db.postgres.service.name | default (printf "%s-db" (include "supabase.fullname" .)) }}:{{ .Values.db.postgres.service.port | default 5432 }}/{{ .Values.analytics.config.dbDatabase }}"
          {{- else }}
          value: "postgresql://{{ .Values.analytics.config.dbUser }}:$(DB_PASSWORD)@{{ .Values.analytics.config.dbHost | default "localhost" }}:5432/{{ .Values.analytics.config.dbDatabase }}"
          {{- end }}
        - name: POSTGRES_BACKEND_SCHEMA
          value: {{ .Values.analytics.config.dbSchema | quote }}
        - name: LOGFLARE_FEATURE_FLAG_OVERRIDE
          value: {{ .Values.analytics.config.featureFlagOverride | quote }}
        - name: PORT
          value: "4000"
        - name: LOGFLARE_URL
          value: "http://{{ .Values.analytics.service.name | default (printf "%s-analytics" (include "supabase.fullname" .)) }}{{- if .Values.analytics.service.namespace }}.{{ .Values.analytics.service.namespace }}{{- end }}:{{ .Values.analytics.service.port }}"
        - name: LOGFLARE_PORT
          value: "4000"
        {{- with .Values.analytics.extraEnvVars }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        ports:
        - containerPort: 4000
          name: http
        volumeMounts:
        - name: analytics-data
          mountPath: /var/lib/analytics
      volumes:
      - name: analytics-data
        {{- if .Values.analytics.persistence.enabled }}
        {{- if .Values.analytics.persistence.existingClaim }}
        persistentVolumeClaim:
          claimName: {{ .Values.analytics.persistence.existingClaim }}
        {{- else }}
        persistentVolumeClaim:
          claimName: {{ include "supabase.fullname" . }}-analytics
        {{- end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }}
