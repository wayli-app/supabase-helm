{{- if .Values.db.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "supabase.fullname" . }}-db
  namespace: {{ include "supabase.namespace" . }}
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
  {{- with .Values.db.postgres.extraAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ .Values.db.postgres.service.name }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "supabase.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: db
      supabaseComponent: {{ include "supabase.fullname" . }}-db
  template:
    metadata:
      labels:
        {{- include "supabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: db
        supabaseComponent: {{ include "supabase.fullname" . }}-db
      {{- with .Values.db.postgres.extraAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with (include "supabase.imagePullSecrets" (dict "component" .Values.db.postgres "global" .Values.global)) }}
      {{ . | nindent 6 }}
      {{- end }}
      {{- if .Values.db.postgres.serviceAccount.create }}
      serviceAccountName: {{ .Values.db.postgres.serviceAccount.name | default (printf "%s-db" (include "supabase.fullname" .)) }}
      {{- end }}
      {{- with .Values.db.postgres.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.db.postgres.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.db.postgres.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (include "supabase.podSecurityContext" (dict "component" "postgres" "Values" (dict "postgres" .Values.db.postgres "global" .Values.global))) }}
      securityContext:
        {{- . }}
      {{- end }}
      initContainers:
        {{- if .Values.db.postgres.initContainers }}
        {{- range .Values.db.postgres.initContainers }}
        - name: {{ .name }}
          {{- if .image }}
          image: {{ .image | quote }}
          {{- end }}
          {{- if .imagePullPolicy }}
          imagePullPolicy: {{ .imagePullPolicy }}
          {{- end }}
          {{- if .command }}
          command: {{ .command | toYaml | nindent 10 }}
          {{- end }}
          {{- if .args }}
          args: {{ .args | toYaml | nindent 10 }}
          {{- end }}
          {{- if .env }}
          env: {{ .env | toYaml | nindent 10 }}
          {{- end }}
          {{- if .resources }}
          resources: {{ .resources | toYaml | nindent 10 }}
          {{- end }}
          {{- if .securityContext }}
          securityContext: {{ .securityContext | toYaml | nindent 10 }}
          {{- end }}
          volumeMounts:
            {{- if .volumeMounts }}
            {{- toYaml .volumeMounts | nindent 12 }}
            {{- end }}
            # Automatically injected volumeMounts for migration files
            - mountPath: /custom-init-scripts
              name: db-init-sql
            - mountPath: /custom-migrations
              name: custom-migrations
            - mountPath: /initdb.d
              name: initdb-scripts-data
        {{- end }}
        {{- end }}
        - name: sql-processor
          image: python:3-alpine
          command: ["python3", "/scripts/process-sql.py"]
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.postgres.existingSecret | default (printf "%s-db-secret" (include "supabase.fullname" .)) }}
                  key: {{ .Values.db.postgres.secretKeys.userPasswordKey | default "password" }}
            - name: POSTGRES_USER
              value: supabase_admin
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.supabase.existingSecret | default (printf "%s-secret" (include "supabase.fullname" .)) }}
                  key: {{ .Values.global.supabase.secretKeys.jwtSecret }}
            - name: JWT_EXP
              value: {{ .Values.global.supabase.jwtExpiry | quote }}
          volumeMounts:
            - name: sql-templates
              mountPath: /templates
            - name: initdb-scripts-data
              mountPath: /docker-entrypoint-initdb.d
            - name: processor-script
              mountPath: /scripts
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi
        - name: init-db
          image: "{{ include "supabase.image" (dict "imageRoot" .Values.db.postgres.image "global" .Values.global) }}"
          imagePullPolicy: {{ .Values.db.postgres.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Copying processed SQL files to init directory..."
              cp -r /docker-entrypoint-initdb.d/* /initdb.d/
              echo "SQL files copied: $(ls /initdb.d/)"

              echo "Checking for user-defined migration scripts..."
              if [ -d /custom-migrations ] && [ "$(ls -A /custom-migrations 2>/dev/null)" ]; then
                echo "Copying user-defined migration scripts..."
                mkdir -p /initdb.d/migrations
                cp /custom-migrations/* /initdb.d/migrations/
              else
                echo "No user-defined migrations found, skipping..."
              fi
              echo "Initialization scripts are ready"
          volumeMounts:
            - mountPath: /custom-migrations
              name: custom-migrations
            - mountPath: /initdb.d
              name: initdb-scripts-data
      containers:
        - name: postgres
          image: "{{ include "supabase.image" (dict "imageRoot" .Values.db.postgres.image "global" .Values.global) }}"
          imagePullPolicy: {{ .Values.db.postgres.image.pullPolicy }}
          {{- with (include "supabase.containerSecurityContext" (dict "component" "postgres" "Values" (dict "postgres" .Values.db.postgres "global" .Values.global))) }}
          securityContext:
            {{- . }}
          {{- end }}
        {{- with .Values.db.postgres.livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with .Values.db.postgres.readinessProbe }}
        readinessProbe:
          {{- toYaml . | nindent 12 }}
        {{- end }}
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.postgres.existingSecret | default (printf "%s-db-secret" (include "supabase.fullname" .)) }}
                  key: {{ .Values.db.postgres.secretKeys.userPasswordKey | default "password" }}
            - name: POSTGRES_USER
              value: supabase_admin
            - name: POSTGRES_DB
              value: postgres
            - name: SUPABASE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.postgres.existingSecret | default (printf "%s-db-secret" (include "supabase.fullname" .)) }}
                  key: {{ .Values.db.postgres.secretKeys.userPasswordKey | default "password" }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
            - name: initdb-scripts-data
              mountPath: /docker-entrypoint-initdb.d
          resources:
            {{- toYaml .Values.db.postgres.resources | nindent 12 }}
      {{- if .Values.db.postgres.persistence.existingClaim }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.db.postgres.persistence.existingClaim }}
        - name: db-init-sql
          configMap:
            name: {{ include "supabase.fullname" . }}-db-init
        - name: sql-templates
          configMap:
            name: {{ include "supabase.fullname" . }}-db-init
        - name: processor-script
          configMap:
            name: {{ include "supabase.fullname" . }}-db-processor
        - name: initdb-scripts-data
          emptyDir: {}
        - name: custom-migrations
          emptyDir: {}
      {{- else }}
      volumes:
        - name: db-init-sql
          configMap:
            name: {{ include "supabase.fullname" . }}-db-init
        - name: sql-templates
          configMap:
            name: {{ include "supabase.fullname" . }}-db-init
        - name: processor-script
          configMap:
            name: {{ include "supabase.fullname" . }}-db-processor
        - name: initdb-scripts-data
          emptyDir: {}
        - name: custom-migrations
          emptyDir: {}
      {{- end }}
  {{- if not .Values.db.postgres.persistence.existingClaim }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.db.postgres.persistence.storageClass }}
        storageClassName: {{ .Values.db.postgres.persistence.storageClass | quote }}
        {{- else if .Values.global.defaultStorageClass }}
        storageClassName: {{ .Values.global.defaultStorageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.db.postgres.persistence.size }}

  {{- end }}
{{- end }}