{{- if .Values.storage.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.fullname" . }}-storage
  namespace: {{ include "supabase.namespace" . }}
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: storage
    supabaseComponent: {{ include "supabase.fullname" . }}-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "supabase.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: storage
      supabaseComponent: {{ include "supabase.fullname" . }}-storage
  template:
    metadata:
      labels:
        {{- include "supabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: storage
        supabaseComponent: {{ include "supabase.fullname" . }}-storage
    spec:
      {{- if .Values.storage.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.storage.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .Values.storage.serviceAccount.create }}
      serviceAccountName: {{ .Values.storage.serviceAccount.name | default (printf "%s-storage" (include "supabase.fullname" .)) }}
      {{- end }}
      {{- with .Values.storage.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.storage.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.storage.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.storage.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: storage
        image: "{{ .Values.storage.image.repository }}:{{ .Values.storage.image.tag }}"
        imagePullPolicy: {{ .Values.storage.image.pullPolicy }}
        {{- with .Values.storage.livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.storage.readinessProbe }}
        readinessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            cpu: {{ .Values.storage.resources.requests.cpu }}
            memory: {{ .Values.storage.resources.requests.memory }}
          limits:
            cpu: {{ .Values.storage.resources.limits.cpu }}
            memory: {{ .Values.storage.resources.limits.memory }}
        env:
        - name: ANON_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.supabase.existingSecret | default (printf "%s-secret" (include "supabase.fullname" .)) }}
              key: {{ .Values.global.supabase.secretKeys.anonKey }}
        - name: SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.supabase.existingSecret | default (printf "%s-secret" (include "supabase.fullname" .)) }}
              key: {{ .Values.global.supabase.secretKeys.serviceRoleKey }}
        - name: POSTGREST_URL
          value: "http://{{ include "supabase.fullname" . }}-rest:3000"
        - name: PGRST_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.supabase.existingSecret | default (printf "%s-secret" (include "supabase.fullname" .)) }}
              key: {{ .Values.global.supabase.secretKeys.jwtSecret }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.postgres.existingSecret | default (printf "%s-db-secret" (include "supabase.fullname" .)) }}
              key: {{ .Values.db.postgres.secretKeys.userPasswordKey | default "password" }}
        - name: DATABASE_URL
          value: "postgres://supabase_storage_admin:$(DB_PASSWORD)@{{- if .Values.db.pgbouncer.enabled }}{{ .Values.db.pgbouncer.service.name | default (printf "%s-pgbouncer" (include "supabase.fullname" .)) }}{{- if .Values.db.pgbouncer.service.namespace }}.{{ .Values.db.pgbouncer.service.namespace }}{{- end }}:{{ .Values.db.pgbouncer.service.port | default 5432 }}{{- else }}{{ printf "%s-db" (include "supabase.fullname" .) }}{{- end }}/postgres"
        - name: FILE_SIZE_LIMIT
          value: {{ .Values.storage.config.fileSizeLimit | quote }}
        - name: STORAGE_BACKEND
          value: {{ .Values.storage.config.storageBackend | quote }}
        - name: FILE_STORAGE_BACKEND_PATH
          value: {{ .Values.storage.config.fileStorageBackendPath | quote }}
        - name: TENANT_ID
          value: {{ .Values.storage.config.tenantId | quote }}
        - name: REGION
          value: {{ .Values.storage.config.region | quote }}
        - name: GLOBAL_S3_BUCKET
          value: {{ .Values.storage.config.globalS3Bucket | quote }}
        {{- if .Values.storage.config.globalS3Endpoint }}
        - name: GLOBAL_S3_ENDPOINT
          value: {{ .Values.storage.config.globalS3Endpoint | quote }}
        {{- end }}
        - name: ENABLE_IMAGE_TRANSFORMATION
          value: {{ .Values.storage.config.enableImageTransformation | quote }}
        - name: IMGPROXY_URL
          value: "http://{{ include "supabase.fullname" . }}-imgproxy:{{ .Values.imgproxy.service.port }}"
        {{- with .Values.storage.extraEnvVars }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        ports:
        - containerPort: 5000
          name: http
        volumeMounts:
        - name: storage-data
          mountPath: /var/lib/storage
      volumes:
      - name: storage-data
        {{- if .Values.storage.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "supabase.fullname" . }}-storage
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }}