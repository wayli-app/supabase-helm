name: Automated Versioning

on:
  pull_request:
    types: [closed]
    branches:
      - main
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'CONTRIBUTING.md'
      - 'SECURITY.md'
      - 'CODE_OF_CONDUCT.md'
      - 'CHANGELOG.md'

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump type
        id: bump_type
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Check PR labels for version bump type
            if echo "${{ github.event.pull_request.labels.*.name }}" | grep -q "major"; then
              echo "bump=major" >> $GITHUB_OUTPUT
              echo "reason=PR labeled as major" >> $GITHUB_OUTPUT
            elif echo "${{ github.event.pull_request.labels.*.name }}" | grep -q "minor"; then
              echo "bump=minor" >> $GITHUB_OUTPUT
              echo "reason=PR labeled as minor" >> $GITHUB_OUTPUT
            elif echo "${{ github.event.pull_request.labels.*.name }}" | grep -q "patch"; then
              echo "bump=patch" >> $GITHUB_OUTPUT
              echo "reason=PR labeled as patch" >> $GITHUB_OUTPUT
            else
              # Analyze commit messages in the PR
              COMMITS=$(git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
              echo "Analyzing commits: $COMMITS"

              if echo "$COMMITS" | grep -q "^[a-f0-9]* feat"; then
                echo "bump=minor" >> $GITHUB_OUTPUT
                echo "reason=PR contains feature commits" >> $GITHUB_OUTPUT
              elif echo "$COMMITS" | grep -q "^[a-f0-9]* fix\|^[a-f0-9]* docs\|^[a-f0-9]* style\|^[a-f0-9]* refactor\|^[a-f0-9]* test\|^[a-f0-9]* chore"; then
                echo "bump=patch" >> $GITHUB_OUTPUT
                echo "reason=PR contains patch-level commits" >> $GITHUB_OUTPUT
              else
                echo "bump=patch" >> $GITHUB_OUTPUT
                echo "reason=Default patch bump for merged PR" >> $GITHUB_OUTPUT
              fi
            fi
          else
            # For direct pushes, analyze recent commits
            RECENT_COMMITS=$(git log --oneline -10)
            echo "Analyzing recent commits: $RECENT_COMMITS"

            if echo "$RECENT_COMMITS" | grep -q "^[a-f0-9]* feat"; then
              echo "bump=minor" >> $GITHUB_OUTPUT
              echo "reason=Direct push contains feature commits" >> $GITHUB_OUTPUT
            elif echo "$RECENT_COMMITS" | grep -q "^[a-f0-9]* fix\|^[a-f0-9]* docs\|^[a-f0-9]* style\|^[a-f0-9]* refactor\|^[a-f0-9]* test\|^[a-f0-9]* chore"; then
              echo "bump=patch" >> $GITHUB_OUTPUT
              echo "reason=Direct push contains patch-level commits" >> $GITHUB_OUTPUT
            else
              echo "bump=patch" >> $GITHUB_OUTPUT
              echo "reason=Default patch bump for direct push" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(grep "^version:" charts/supabase/Chart.yaml | sed 's/version: "\(.*\)"/\1/')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current.outputs.current }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump }}"

          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          case $BUMP_TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="$major.$minor.$patch"
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type: $BUMP_TYPE"
          echo "New version: $NEW_VERSION"

      - name: Check if version needs updating
        id: version_check
        run: |
          CURRENT_VERSION="${{ steps.current.outputs.current }}"
          NEW_VERSION="${{ steps.new_version.outputs.new }}"

          if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            echo "no_change=true" >> $GITHUB_OUTPUT
            echo "Version unchanged ($CURRENT_VERSION), skipping version bump"
          else
            echo "no_change=false" >> $GITHUB_OUTPUT
            echo "Version will be updated from $CURRENT_VERSION to $NEW_VERSION"
          fi

      - name: Update Chart.yaml version
        if: steps.version_check.outputs.no_change != 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new }}"
          sed -i "s/^version: \".*\"/version: \"$NEW_VERSION\"/" charts/supabase/Chart.yaml
          echo "Updated Chart.yaml version to $NEW_VERSION"

      - name: Generate changelog entry
        id: changelog
        if: steps.version_check.outputs.no_change != 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new }}"
          CURRENT_DATE=$(date +%Y-%m-%d)
          BUMP_TYPE="${{ steps.bump_type.outputs.bump }}"
          REASON="${{ steps.bump_type.outputs.reason }}"

          # Get recent commits for changelog
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMITS=$(git log --oneline --format="- %s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            COMMITS=$(git log --oneline --format="- %s" -5)
          fi

          # Create changelog entry
          cat > temp_changelog.md << EOF
          ## [$NEW_VERSION] - $CURRENT_DATE

          ### What Changed
          - Automated version bump ($BUMP_TYPE): $REASON

          ### Recent Changes
          $COMMITS

          ### Breaking Changes
          - None

          ### Migration Guide
          - No migration required

          ---

          EOF

          # Insert at the top of CHANGELOG.md (after the header)
          sed -i '/^## \[Unreleased\]/r temp_changelog.md' CHANGELOG.md
          rm temp_changelog.md

      - name: Commit and push changes
        if: steps.version_check.outputs.no_change != 'true'
        run: |
          git add charts/supabase/Chart.yaml CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new }}"
          git push origin main || {
            echo "Push failed, trying to pull latest changes first..."
            git pull origin main --rebase
            git push origin main
          }

      - name: Create Git tag
        if: steps.version_check.outputs.no_change != 'true'
        run: |
          echo "Creating Git tag v${{ steps.new_version.outputs.new }}..."

          # Remove tag if it already exists locally
          git tag -d v${{ steps.new_version.outputs.new }} 2>/dev/null || true
          echo "Removed local tag if it existed"

          # Remove tag if it already exists remotely
          git push origin :refs/tags/v${{ steps.new_version.outputs.new }} 2>/dev/null || true
          echo "Removed remote tag if it existed"

          # Create new tag
          git tag v${{ steps.new_version.outputs.new }}
          echo "Created local tag v${{ steps.new_version.outputs.new }}"

          # Push the tag
          git push origin v${{ steps.new_version.outputs.new }}
          echo "Pushed tag v${{ steps.new_version.outputs.new }} to remote"

          # Verify tag exists
          echo "Verifying tag was created:"
          git ls-remote --tags origin | grep "v${{ steps.new_version.outputs.new }}"

          echo "Tag v${{ steps.new_version.outputs.new }} created and pushed successfully"

      - name: Trigger Release Workflow
        if: steps.version_check.outputs.no_change != 'true'
        run: |
          echo "Tag v${{ steps.new_version.outputs.new }} created successfully"
          echo "This will automatically trigger the Release Charts workflow"
          echo "Release workflow will package and publish the Helm chart to GHCR"

      - name: Create Release
        if: steps.version_check.outputs.no_change != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new }}
          release_name: Release v${{ steps.new_version.outputs.new }}
          body: |
            ## What's Changed

            This is an automated release with version bump to ${{ steps.new_version.outputs.new }}.

            **Bump Type:** ${{ steps.bump_type.outputs.bump }}
            **Reason:** ${{ steps.bump_type.outputs.reason }}

            ## Installation

            ```bash
            helm repo add supabase-helm https://wayli-app.github.io/supabase-helm
            helm repo update
            helm install my-supabase supabase-helm/supabase
            ```

            ## Breaking Changes

            None in this release.

            ## Migration Guide

            No migration required for this release.
          draft: false
          prerelease: false