name: Release Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: YAML Linting
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: |
          yamllint --strict . || true
          yamllint --strict charts/ || true

      - name: Helm Chart Linting
        run: |
          helm lint charts/supabase
          helm dependency build charts/supabase

      # - uses: DavidAnson/markdownlint-cli2-action@v20
      #   with:
      #     globs: '**/*.md'

      - name: Shell Script Linting
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck
        run: |
          find scripts/ -name "*.sh" -exec shellcheck {} \;

  version:
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      new_version: ${{ steps.set_outputs.outputs.new_version }}
      should_release: ${{ steps.set_outputs.outputs.should_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Next Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          major_regexp_flags: ""
          minor_pattern: "(MINOR)"
          minor_regexp_flags: ""
          version_format: "${major}.${minor}.${patch}"
          change_path: ""
          namespace: ""
          bump_each_commit: false
          bump_each_commit_patch_pattern: ""
          search_commit_body: false
          user_format_type: "csv"
          enable_prerelease_mode: false
          debug: false
          version_from_branch: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Version Outputs
        id: set_outputs
        run: |
          echo "Available version outputs:"
          echo "version: ${{ steps.version.outputs.version }}"
          echo "version_type: ${{ steps.version.outputs.version_type }}"
          echo "major: ${{ steps.version.outputs.major }}"
          echo "minor: ${{ steps.version.outputs.minor }}"
          echo "patch: ${{ steps.version.outputs.patch }}"
          echo "increment: ${{ steps.version.outputs.increment }}"

          # Check if we have a new version from semantic-version action
          if [ -n "${{ steps.version.outputs.version }}" ] && [ "${{ steps.version.outputs.version }}" != "0.0.0" ]; then
            echo "new_version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Version determined: ${{ steps.version.outputs.version }}"
          else
            # Get current version from Chart.yaml
            CURRENT_VERSION=$(grep '^version:' charts/supabase/Chart.yaml | awk '{print $2}')
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No version bump needed - current version: $CURRENT_VERSION"
          fi

  release:
    runs-on: ubuntu-latest
    needs: [lint, version]
    if: needs.version.outputs.should_release == 'true'
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Job Outputs
        run: |
          echo "Debug: Job outputs received:"
          echo "should_release: '${{ needs.version.outputs.should_release }}'"
          echo "new_version: '${{ needs.version.outputs.new_version }}'"
          echo "Condition evaluation: ${{ needs.version.outputs.should_release == 'true' }}"

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Update Chart Version
        run: |
          NEW_VERSION="${{ needs.version.outputs.new_version }}"
          CURRENT_VERSION=$(grep '^version:' charts/supabase/Chart.yaml | awk '{print $2}')

          echo "Current Chart.yaml version: $CURRENT_VERSION"
          echo "New version from semantic-version: $NEW_VERSION"

          if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version bump detected: $CURRENT_VERSION -> $NEW_VERSION"
            sed -i "s/^version: .*/version: $NEW_VERSION/" charts/supabase/Chart.yaml

            # Update appVersion if it exists
            if grep -q "^appVersion:" charts/supabase/Chart.yaml; then
              sed -i "s/^appVersion: .*/appVersion: $NEW_VERSION/" charts/supabase/Chart.yaml
            fi

            # Show the updated Chart.yaml
            echo "Updated Chart.yaml:"
            cat charts/supabase/Chart.yaml
          else
            echo "No version change detected. Current version: $CURRENT_VERSION, New version: $NEW_VERSION"
            echo "This suggests the semantic-version action didn't detect a version bump."
            echo "Check your commit patterns and semantic-version configuration."
          fi

      - name: Commit Version Update
        run: |
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit. Checking if Chart.yaml was modified..."
            if git diff charts/supabase/Chart.yaml | grep -q "version:"; then
              echo "Chart.yaml was modified, staging and committing..."
              git add charts/supabase/Chart.yaml
              git commit -m "chore: bump version to ${{ needs.version.outputs.new_version }}"
              git push origin main
            else
              echo "No version changes detected in Chart.yaml. Skipping commit."
              echo "This may indicate an issue with the semantic-version action."
            fi
          else
            echo "Changes already staged, committing..."
            git commit -m "chore: bump version to ${{ needs.version.outputs.new_version }}"
            git push origin main
          fi

      - name: Create and Push Tag
        run: |
          NEW_VERSION="${{ needs.version.outputs.new_version }}"
          TAG_NAME="v$NEW_VERSION"

          echo "Creating tag: $TAG_NAME"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

          echo "Tag $TAG_NAME created and pushed"

      - name: Initialize gh-pages branch
        run: |
          # Fetch all branches including gh-pages
          git fetch origin gh-pages:gh-pages || true

          # Check if gh-pages branch exists
          if ! git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "Creating gh-pages branch..."
            # Create an empty gh-pages branch
            git checkout --orphan gh-pages
            # Remove all files
            git rm -rf .
            # Create a basic index.yaml
            echo "apiVersion: v1\nentries: {}" > index.yaml
            # Commit and push the new branch
            git add index.yaml
            git commit -m "Initialize gh-pages branch with empty index"
            git push origin gh-pages
            # Switch back to main branch
            git checkout main
          else
            echo "gh-pages branch already exists"
            # Ensure we have the latest gh-pages branch
            git fetch origin gh-pages:gh-pages
          fi

      - name: Install chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          charts_dir: charts
          skip_existing: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Helm chart to GHCR
        run: |
          # Check if chart package exists
          if [ ! -f .cr-release-packages/supabase-*.tgz ]; then
            echo "Error: No chart package found in .cr-release-packages/"
            exit 1
          fi

          # Get the chart version from the packaged chart
          CHART_VERSION=$(helm show chart .cr-release-packages/supabase-*.tgz | grep '^version:' | cut -d' ' -f2)
          echo "Pushing chart version: $CHART_VERSION to GHCR"

          # List the chart package for verification
          ls -la .cr-release-packages/

          # Push the chart to GHCR
          helm push .cr-release-packages/supabase-*.tgz oci://ghcr.io/${{ github.repository_owner }}/charts

          echo "Successfully pushed chart to GHCR"
          echo "Chart available at: oci://ghcr.io/${{ github.repository_owner }}/charts/supabase:$CHART_VERSION"

      - name: Generate Release Notes
        id: release_notes
        uses: release-drafter/release-drafter@v5
        with:
          name: Release v${{ needs.version.outputs.new_version }}
          tag: v${{ needs.version.outputs.new_version }}
          publish: true
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ needs.version.outputs.new_version }}"
          TODAY=$(date +%Y-%m-%d)

          # Get commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s" HEAD)
          fi

          # Create a temporary file with the new changelog entry
          cat > /tmp/new_changelog_entry.md << 'EOF'
          ## [$NEW_VERSION] - $TODAY

          $COMMITS

          EOF

          # Insert the new entry after line 2 (after the header)
          head -n 2 CHANGELOG.md > /tmp/changelog_header.md
          tail -n +3 CHANGELOG.md > /tmp/changelog_body.md
          cat /tmp/changelog_header.md /tmp/new_changelog_entry.md /tmp/changelog_body.md > CHANGELOG.md

          echo "CHANGELOG.md updated with new version $NEW_VERSION"

      - name: Commit and Push CHANGELOG
        run: |
          git add CHANGELOG.md
          git commit -m "docs: update changelog for version ${{ needs.version.outputs.new_version }}"
          git push origin main
          echo "CHANGELOG.md updated and committed for version ${{ needs.version.outputs.new_version }}"
