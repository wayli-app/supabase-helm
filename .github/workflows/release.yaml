name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version-bump:
        description: 'Version bump type (none/patch/minor/major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - none
          - patch
          - minor
          - major
      dry-run:
        description: 'Run in dry-run mode (no actual release)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install yq
        if: ${{ inputs.version-bump != 'none' }}
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Bump Chart Version
        if: ${{ inputs.version-bump != 'none' }}
        id: bump_version
        run: |
          CHART_FILE="charts/supabase/Chart.yaml"
          CURRENT_VERSION=$(yq eval '.version' $CHART_FILE)
          echo "Current version: $CURRENT_VERSION"

          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Bump version based on input
          case "${{ inputs.version-bump }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          # Update both version and appVersion in Chart.yaml
          yq eval ".version = \"$NEW_VERSION\"" -i $CHART_FILE
          yq eval ".appVersion = \"$NEW_VERSION\"" -i $CHART_FILE

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and Push Version Bump
        if: ${{ inputs.version-bump != 'none' && !inputs.dry-run }}
        run: |
          git add charts/supabase/Chart.yaml
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push origin main

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Get Chart Version
        id: chart_version
        run: |
          CHART_VERSION=$(grep '^version:' charts/supabase/Chart.yaml | awk '{print $2}')
          echo "version=$CHART_VERSION" >> $GITHUB_OUTPUT
          echo "Chart version: $CHART_VERSION"

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG_NAME="v${{ steps.chart_version.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME already exists!"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG_NAME does not exist yet."
          fi

      - name: Exit if tag exists
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "Error: Tag v${{ steps.chart_version.outputs.version }} already exists."
          echo "Please bump the version in Chart.yaml before releasing."
          exit 1

      - name: Create and Push Tag
        if: ${{ !inputs.dry-run }}
        run: |
          TAG_NAME="v${{ steps.chart_version.outputs.version }}"
          echo "Creating tag: $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
          echo "Tag $TAG_NAME created and pushed"

      - name: Initialize gh-pages branch
        run: |
          # Fetch all branches including gh-pages
          git fetch origin gh-pages:gh-pages || true

          # Check if gh-pages branch exists
          if ! git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "Creating gh-pages branch..."
            # Create an empty gh-pages branch
            git checkout --orphan gh-pages
            # Remove all files
            git rm -rf .
            # Create a basic index.yaml
            echo "apiVersion: v1\nentries: {}" > index.yaml
            # Commit and push the new branch
            git add index.yaml
            git commit -m "Initialize gh-pages branch with empty index"
            git push origin gh-pages
            # Switch back to main branch
            git checkout main
          else
            echo "gh-pages branch already exists"
          fi

      - name: Package and Release Helm Chart
        uses: helm/chart-releaser-action@v1.7.0
        if: ${{ !inputs.dry-run }}
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_GENERATE_RELEASE_NOTES: "true"
        with:
          charts_dir: charts
          skip_existing: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ !inputs.dry-run }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Helm chart to GHCR
        if: ${{ !inputs.dry-run }}
        run: |
          CHART_VERSION="${{ steps.chart_version.outputs.version }}"

          # Package the chart
          helm package charts/supabase -d .cr-release-packages

          # Verify package exists
          if [ ! -f .cr-release-packages/supabase-${CHART_VERSION}.tgz ]; then
            echo "Error: Chart package not found at .cr-release-packages/supabase-${CHART_VERSION}.tgz"
            ls -la .cr-release-packages/
            exit 1
          fi

          echo "Pushing chart version: $CHART_VERSION to GHCR"

          # Push the chart to GHCR
          helm push .cr-release-packages/supabase-${CHART_VERSION}.tgz oci://ghcr.io/${{ github.repository_owner }}/charts

          echo "Successfully pushed chart to GHCR"
          echo "Chart available at: oci://ghcr.io/${{ github.repository_owner }}/charts/supabase:$CHART_VERSION"

      - name: Dry-run summary
        if: ${{ inputs.dry-run }}
        run: |
          echo "=== DRY-RUN MODE ==="
          if [ "${{ inputs.version-bump }}" != "none" ]; then
            echo "Would have bumped version (${{ inputs.version-bump }}): ${{ steps.bump_version.outputs.new_version }}"
            echo "Would have committed and pushed the version bump"
          fi
          echo "Would have released version: ${{ steps.chart_version.outputs.version }}"
          echo "Would have created tag: v${{ steps.chart_version.outputs.version }}"
          echo "Would have published to GitHub Pages and GHCR"
          echo "No actual changes were made."
